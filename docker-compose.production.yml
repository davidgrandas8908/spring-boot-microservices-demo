version: '3.8'

services:
  # Base de datos para Productos (Production)
  productos-db-prod:
    image: postgres:15-alpine
    container_name: productos-db-prod
    environment:
      POSTGRES_DB: productos_db_prod
      POSTGRES_USER: productos_user_prod
      POSTGRES_PASSWORD: ${PRODUCTOS_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - productos_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - microservices-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U productos_user_prod -d productos_db_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Base de datos para Inventario (Production)
  inventario-db-prod:
    image: postgres:15-alpine
    container_name: inventario-db-prod
    environment:
      POSTGRES_DB: inventario_db_prod
      POSTGRES_USER: inventario_user_prod
      POSTGRES_PASSWORD: ${INVENTARIO_DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - inventario_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - microservices-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventario_user_prod -d inventario_db_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Microservicio de Productos (Production)
  productos-service-prod:
    image: ghcr.io/your-username/microservices/productos-service:${PRODUCTOS_VERSION:-latest}
    container_name: productos-service-prod
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://productos-db-prod:5432/productos_db_prod
      SPRING_DATASOURCE_USERNAME: productos_user_prod
      SPRING_DATASOURCE_PASSWORD: ${PRODUCTOS_DB_PASSWORD}
      PRODUCTOS_SERVICE_API_KEY: ${PRODUCTOS_API_KEY}
      # Configuraciones específicas de producción
      LOGGING_LEVEL_ROOT: WARN
      LOGGING_LEVEL_COM_MICROSERVICES: INFO
      JAVA_OPTS: "-Xms1g -Xmx2g -XX:+UseG1GC -XX:+UseStringDeduplication"
    depends_on:
      productos-db-prod:
        condition: service_healthy
    networks:
      - microservices-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Microservicio de Inventario (Production)
  inventario-service-prod:
    image: ghcr.io/your-username/microservices/inventario-service:${INVENTARIO_VERSION:-latest}
    container_name: inventario-service-prod
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventario-db-prod:5432/inventario_db_prod
      SPRING_DATASOURCE_USERNAME: inventario_user_prod
      SPRING_DATASOURCE_PASSWORD: ${INVENTARIO_DB_PASSWORD}
      PRODUCTOS_SERVICE_URL: http://productos-service-prod:8081
      PRODUCTOS_SERVICE_API_KEY: ${PRODUCTOS_API_KEY}
      INVENTARIO_SERVICE_API_KEY: ${INVENTARIO_API_KEY}
      # Configuraciones específicas de producción
      LOGGING_LEVEL_ROOT: WARN
      LOGGING_LEVEL_COM_MICROSERVICES: INFO
      JAVA_OPTS: "-Xms1g -Xmx2g -XX:+UseG1GC -XX:+UseStringDeduplication"
    depends_on:
      inventario-db-prod:
        condition: service_healthy
      productos-service-prod:
        condition: service_healthy
    networks:
      - microservices-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx Reverse Proxy (Production)
  nginx-prod:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - productos-service-prod
      - inventario-service-prod
    networks:
      - microservices-network-prod
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Cache (Production)
  redis-prod:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - microservices-network-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices-network-prod
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - microservices-network-prod
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - microservices-network-prod
    restart: unless-stopped

volumes:
  productos_data_prod:
    driver: local
  inventario_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  microservices-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

